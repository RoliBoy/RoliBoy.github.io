#!/bin/bash

info() {
    echo "[INFO] $1" >> archer.log
}

warn() {
    echo "[WARN] $1" >> archer.log
    
    whiptail --title 'A warning was issued' --yesno "$1\n\nYou may chose to ignore this warning and continue the install\nContinue?" 0 0 3>&1 1>&2 2>&3
    
    if [[ $? != 0 ]]; then
        whiptail --title 'archer.log' --textbox archer.log `tput lines` `tput cols` 3>&1 1>&2 2>&3
        clear
        exit 1
    fi
}

error() {
    echo "[ERROR] $1" >> archer.log
    
    whiptail --title 'An error has occured' --yesno "Show installation log?" 0 0 3>&1 1>&2 2>&3
    [[ $? = 0 ]] && whiptail --title 'archer.log' --textbox archer.log `tput lines` `tput cols` 3>&1 1>&2 2>&3
    clear
    
    exit 1
}

# TODO: this
check_stderr() {
    if [[ -s archer.err ]]; then
        echo "[STDERR] $(cat archer.err)" >> archer.log
        rm archer.err
        return 0
    else
        return 1
    fi
}

set_terminal_colors() {
    setterm -blank 0 -powersave off
    echo -ne "\e]P0282a36" #black
    echo -ne "\e]P814151b" #darkgrey
    echo -ne "\e]P1ff2222" #darkred
    echo -ne "\e]P9ff5555" #red
    echo -ne "\e]P21ef956" #darkgreen
    echo -ne "\e]PA50fa7b" #green
    echo -ne "\e]P3ebf85b" #brown
    echo -ne "\e]PBf1fa8c" #yellow
    echo -ne "\e]P44d5b86" #darkblue
    echo -ne "\e]PCbd93f9" #blue
    echo -ne "\e]P5ff46b0" #darkmagenta
    echo -ne "\e]PDff79c6" #magenta
    echo -ne "\e]P659dffc" #darkcyan
    echo -ne "\e]PE8be9fd" #cyan
    echo -ne "\e]P7f8f8f2" #lightgrey
    echo -ne "\e]PFf8f8f2" #white
    clear
}

set_dialog_colors() {
    export NEWT_COLORS='
        root=,black
        border=cyan,black
        window=,black
        shadow=,black
        title=brightcyan,black
        button=black,cyan
        checkbox=cyan,black
        actcheckbox=black,cyan
        entry=cyan,black
        listbox=cyan,black
        actlistbox=black,cyan
        textbox=cyan,black
        acttextbox=black,cyan
        emptyscale=,black
        fullscale=,cyan
        compactbutton=cyan,black
        actsellistbox=black,cyan'
}

detect_boot_mode() {
    [[ -d /sys/firmware/efi/efivars ]] && echo UEFI || echo BIOS
}

detect_cpu_vendor() {
    grep -q GenuineIntel /proc/cpuinfo 2>archer.err && echo intel && return
    grep -q AuthenticAMD /proc/cpuinfo 2>archer.err && echo amd && return
    echo unknown
}

# TODO: add amd
detect_gpu_configuration() {
    lspci | grep VGA | grep -qi intel && lspci | grep 3D | grep -qi nvidia && echo optimus && return
    lspci | grep VGA | grep -qi intel && echo intel && return
    lspci | grep VGA | grep -qi nvidia && echo nvidia && return
    echo unknown
}

detect_battery() {
    [[ -z "$(ls -A /sys/class/power_supply)" ]] && echo no && return
    grep -qi battery /sys/class/power_supply/*/type 2>archer.err && echo yes || echo no
}

detect_wireless() {
    lspci | grep Network | grep -qi 'wireless\|WLAN\|wifi\|802\.11' && echo yes || echo no
}

detect_bluetooth() {
    lsusb | grep -qi bluetooth && echo yes && return
    dmesg | grep -qi bluetooth && echo yes || echo no
}

detect_ssd() {
    grep -q 0 /sys/block/*/queue/rotational 2>archer.err && echo yes || echo no
}

get_drive() {
    whiptail --title 'Target drive' \
        --menu 'Select drive:' \
        0 0 0 \
        $(
            lsblk -lno PATH,SIZE,MODEL,TYPE |
            awk '/disk/ { print $1, $2"<"$3">" }'
        ) \
        3>&1 1>&2 2>&3
}

# TODO: dynamically determine box width
get_mirrorlist_country() {
    whiptail --title 'Mirrorlist' \
        --menu 'Select country: ' \
        $((`tput lines` * 3 / 4)) 32 $((`tput lines` * 3 / 4 - 8)) \
        $(
            curl -s https://archlinux.org/mirrorlist/ |
            awk -F'[<">]' '/<option value=".*">.*<\/option>/ { gsub(" ", "-", $5); print $3, $5 }'
        ) \
        3>&1 1>&2 2>&3
}

get_locale() {
    whiptail --title 'Locale' \
        --menu 'Select locale: ' \
        $((`tput lines` * 3 / 4)) 35 $((`tput lines` * 3 / 4 - 8)) \
        $(
            awk -F '#' '/^#[a-z]/ { print $2 } /^[a-z]/ { print $1 }' /etc/locale.gen
        ) \
        3>&1 1>&2 2>&3
}

get_timezone() {
    whiptail --title 'Timezone' \
        --menu 'Select timezone: ' \
        $((`tput lines` * 3 / 4)) 33 $((`tput lines` * 3 / 4 - 8)) \
        $(
            for zone in $(ls -F /usr/share/zoneinfo | grep \/$); do
                for region in $(ls /usr/share/zoneinfo/$zone); do
                    echo $zone$region '-'
                done
            done
        ) \
        3>&1 1>&2 2>&3
}

get_hostname() {
    whiptail --title 'Hostname' --inputbox 'Enter hostname:' 0 $((`tput cols` * 3 / 4)) 3>&1 1>&2 2>&3
}

get_username() {
    whiptail --title 'Username' --inputbox 'Enter username:' 0 $((`tput cols` * 3 / 4)) 3>&1 1>&2 2>&3
}

get_password() {
    whiptail --title 'Password' --passwordbox 'Enter password:' 8 $((`tput cols` * 3 / 4)) 3>&1 1>&2 2>&3
}

# TODO: implement these
get_desktop_environment() {
    whiptail --title 'DE/WM' --radiolist 'Select desktop environment / window manager:' 0 $((`tput cols` * 3 / 4)) 0 \
        'bspwm' 'Tiling window manager that represents windows as the leaves of a full binary tree' OFF \
        'Budgie' '[WIP]Desktop environment designed with the modern user in mind, that focuses on simplicity and elegance' OFF \
        'Cinnamon' '[WIP]Combines a traditional desktop layout with modern graphical effects' OFF \
        'Deepin' '[WIP]Intuitive and elegant design providing an easy to use and reliable system for global users' OFF \
        'dwm' 'extremely lightweight and fast tiling WM, optimizing the environment for the task being performed' OFF \
        'GNOME' '[WIP]Attractive, intuitive and extensible desktop with a modern look' OFF \
        'i3' 'Tiling window manager primarily targeted at developers and advanced users' OFF \
        'KDE Plasma' 'Modern and polished, highly customizable and lightweight' ON \
        'LXDE' '[WIP]Lightweight, fast and energy-saving desktop environment with a modern interface' OFF \
        'LXQt' '[WIP]Modular, blazing-fast and user-friendly desktop environment' OFF \
        'MATE' '[WIP]Intuitive and attractive, preserving a traditional desktop experience' OFF \
        'Xfce' '[WIP]Lightweight and modular desktop environment ' OFF \
        'None' 'Don'\''t install a desktop environment / window manager'  OFF \
        3>&1 1>&2 2>&3
}

get_login_shell() {
    whiptail --title 'Shell' --radiolist 'Select user'\''s default shell:' 0 $((`tput cols` * 3 / 4)) 0 \
        'bash' 'Bourne Again Shell, default shell of many distributions' ON \
        'fish' 'Friendly Interactive Shell, user-friendly and easily customizable' OFF \
        'zsh' 'Z Shell, bash-compatible with spelling correction, approximate completion and recursive path expansion'  OFF \
        3>&1 1>&2 2>&3
}

get_optimus_backend() {
    whiptail --title 'Optimus' --radiolist 'Select backend for GPU switching:' 0 $((`tput cols` * 3 / 4)) 0 \
        'bumblebee' 'allows running selected applications on the dedicated GPU while using integrated graphics for everything else (sacrificing some performance)' ON \
        'optimus-manager' 'switch cards with a single command, achieving maximum performance out of the dedicated GPU (requires X server restart after switch)'  OFF \
        'none' 'no backed or nvidia driver will be installed' OFF \
        3>&1 1>&2 2>&3
}

get_optional_features() {
    whiptail --title 'Optional features' --checklist 'Select optional features' --separate-output 0 $((`tput cols` * 3 / 4)) 0 \
        'netcache' 'Use netcache during installation' OFF \
        'autologin' 'Get automatically logged in on boot' OFF \
        'rank mirrors' 'Rank pacman mirrors by speed' OFF \
        'archstrike repository' 'Enable Archstrike repository (pentesting tools)' OFF \
        'add extra packages' 'Install additional packages from official repositories or AUR' OFF \
        'passwordless sudo' 'No password prompt when running commands with sudo' ON \
        'bluetooth audio support' 'Add support for bluetooth headphones and speakers' OFF \
        3>&1 1>&2 2>&3
}

get_netcache_ip() {
    whiptail --title 'Netcache IP' --inputbox "Enter the IP address of the machine running the netcache server: " 0 $((`tput cols` * 3 / 4)) 3>&1 1>&2 2>&3
}

get_extra_packages() {
    whiptail --title 'Extra packages' --inputbox "Enter space separated package names: " 0 $((`tput cols` * 3 / 4)) 3>&1 1>&2 2>&3
}

create_partitions() {
    for partition in $(parted -s $selected_drive print 2>/dev/null | awk '/^ / {print $1}' | tac); do
        umount -l ${selected_drive}$partition > /dev/null 2>&1
        parted -s $selected_drive rm $partition

        info "unmounting and deleting: ${selected_drive}$partition"
    done

    parted -s $selected_drive mklabel gpt

    parted -s $selected_drive mkpart ESP fat32 1MiB 513MiB
    parted -s $selected_drive set 1 boot on
    parted -s $selected_drive mkpart primary ext4 513MiB 100%

    mkfs.vfat ${selected_drive}1 > /dev/null 2>&1
    mkfs.ext4 ${selected_drive}2 > /dev/null 2>&1

    mount ${selected_drive}2 /mnt
    mkdir /mnt/boot
    mount ${selected_drive}1 /mnt/boot


    info "boot partition created and mounted: $(findmnt -o TARGET,FSTYPE ${selected_drive}1 | grep /boot | grep -q vfat && echo yes || echo no)"
    info "root partition created and mounted: $(findmnt -o TARGET,FSTYPE ${selected_drive}2 | grep / | grep -q ext4 && echo yes || echo no)"
}

download_mirrorlist() {
    local api_endpoint="https://archlinux.org/mirrorlist/?"
    local api_param_country="country=$mirrorlist_country&"
    local api_param_protocol="protocol=http&protocol=https&ip_version=4"
    local api_query="${api_endpoint}${api_param_country}${api_param_protocol}"
    curl -so /etc/pacman.d/mirrorlist "$api_query"
    sed -i '/^#.*Server /s/^#//' /etc/pacman.d/mirrorlist

    while read mirror; do
        [[ $mirror =~ Server ]] && info "mirror $mirror"
    done < /etc/pacman.d/mirrorlist
}

rank_mirrors() {
    echo -ne '' > /tmp/mirrorlist

    mirrorlist=($(awk '/Server/ { print $3 }' /etc/pacman.d/mirrorlist))
    # packages=(gcc-fortran-10.2.0-4-x86_64.pkg.tar.zst glibc-2.32-5-x86_64.pkg.tar.zst icu-68.2-1-x86_64.pkg.tar.zst)
    # TODO: dynamic package selection
    packages=(bash-5.1.004-1-x86_64.pkg.tar.zst openssl-1.0-1.0.2.u-1-x86_64.pkg.tar.zst sqlite-3.34.0-1-x86_64.pkg.tar.zst)

    total_downloads=$((${#mirrorlist[@]} * ${#packages[@]}))
    
    for i in ${!mirrorlist[@]}; do
        host=$(grep -o '.*//[^/]*' <<< "${mirrorlist[i]}")
        let index=$i+1
        base_url="$(sed 's/$repo/core/g; s/$arch/x86_64/g' <<< ${mirrorlist[i]})"

        start_time=$(date +%s%3N)
        for package_index in ${!packages[@]}; do
            url="$base_url/${packages[package_index]}"

            echo -e 'XXX'
            echo -e $(((current_progress * 100 + progress[rank_mirrors] * (i * ${#packages[@]} + package_index) * 100 / total_downloads) / total_progress))
            # TODO: echo download speed
            echo -e "Testing mirror $host"
            echo -e 'XXX'

            # TODO: handle timeouts
            curl -s "$url" -o /dev/null --connect-timeout 2 2>archer.err
        done
        total_time=$(($(date +%s%3N) - start_time))

        check_stderr && cat archer.err >> archer.err2

        # TODO: clean up this
        echo "$total_time Server = ${mirrorlist[i]}" >> /tmp/mirrorlist
    done

    cat /tmp/mirrorlist | sort -k1n | cut -d' ' -f2- > /etc/pacman.d/mirrorlist    
    rm /tmp/mirrorlist
#     TODO: debug log
}

enable_netcache() {
    sed -i "/\[core\]/i[netcache]\nSigLevel = Optional TrustAll\nServer = http://$netcache_ip:1337/\n" /etc/pacman.conf

    info "netcache repository added to pacman.conf: $(grep -q netcache /etc/pacman.conf && echo yes || echo no)"
}

install_packages() {
    local aur_packages=(
        $([[ $desktop_environment = dwm ]] && echo dwm)
#         $([ "$optimus_backend" = optimus-manager ] && echo optimus-manager)
        ${extra_packages_aur[@]}
    )

    local official_packages=(
        base
        sudo

        make
        patch

        $([[ ${#aur_packages[@]} != 0 ]] && echo fakeroot)
        $([[ ${#aur_packages[@]} != 0 ]] && echo binutils)

#         pkgconf?
#         gcc?

        linux
        linux-firmware

        $([[ $cpu_vendor = intel ]] && echo intel-ucode)
        $([[ $cpu_vendor = amd ]] && echo amd-ucode)

        networkmanager

        $([[ $gpu_configuration = nvidia ]] && echo nvidia)

        #$([ "$optimus_backend" = bumblebee ] && echo nvidia)
        #$([ "$optimus_backend" = bumblebee ] && echo bbswitch)
        #$([ "$optimus_backend" = bumblebee ] && echo bumblebee)

        #$([ "$optimus_backend" = optimus-manager ] && echo nvidia)
        #$([ "$optimus_backend" = optimus-manager ] && echo bbswitch)

#        $([ "$optimus_backend" = optimus-manager ] && echo optimus-manager) AUR package


        $([[ $login_shell = bash ]] && echo bash)
        $([[ $login_shell = fish ]] && echo fish)
        $([[ $login_shell = zsh ]] && echo zsh)

        $([[ $has_battery = yes ]] && echo tlp)
        $([[ $has_battery = yes ]] && [[ $has_wireless = yes ]] && echo tlp-rdw)

#         TODO: add menu bar
        $([[ $desktop_environment = bspwm ]] && echo bspwm sxhkd)

        $([[ $desktop_environment = dwm ]] && echo xorg-server xorg-xinit xorg-fonts-100dpi)

        $([[ $desktop_environment = i3 ]] && echo i3-gaps xorg-server xorg-xinit)

        $([[ $desktop_environment = 'KDE Plasma' ]] && echo bluedevil breeze-gtk kde-gtk-config kdeplasma-addons kgamma5 khotkeys kinfocenter kscreen kwayland-integration kwrited plasma-browser-integration plasma-desktop plasma-disks plasma-nm plasma-pa plasma-thunderbolt plasma-vault plasma-workspace plasma-workspace-wallpapers powerdevil sddm-kcm xdg-desktop-portal-kde)
        
#         bluedevil breeze breeze-gtk kactivitymanagerd kde-cli-tools kdecoration kde-gtk-config kdeplasma-addons kgamma5 khotkeys kinfocenter kmenuedit kscreen kscreenlocker ksshaskpass ksysguard kwallet-pam kwayland-integration kwayland-server kwin kwrited plasma-browser-integration plasma-desktop plasma-disks plasma-integration plasma-nm plasma-pa plasma-thunderbolt plasma-vault plasma-workspace plasma-workspace-wallpapers polkit-kde-agent powerdevil sddm-kcm systemsettings xdg-desktop-portal-kde

        #$([ "$feature_bluetooth_audio" = yes ] && echo pulseaudio-bluetooth)

#TODO: bluetooth
#         pulseaudio-bluez
        ${extra_packages_official[@]}
    )

    for package in ${official_packages[@]}; do info "package: $package"; done
    

    pacstrap /mnt ${official_packages[@]} 2>/dev/null | awk "
        BEGIN {
            current = $current_progress;
            weight = ${progress[install_packages]} * $([[ ${#aur_packages[@]} == 0 ]] && echo 1 || echo 0.6);
            scale = 100 / $total_progress;
        }
        /^:: Synchronizing package databases\.\.\.$/ {
            progress = int(current * scale);
            print \"XXX\n\"progress\"\nSynchronizing package databases\nXXX\"
        }
        /^Packages \([0-9]*\)/ {
            total = substr(\$2, 2, length(\$2) - 2)
        }
        /^downloading .*\.pkg\.tar.*\.\.\.$/ {
            dlindex++;
            progress = int((current + 0.4 * weight * dlindex / total) * scale);
            print \"XXX\n\"progress\"\nDownloading \"substr(\$2, 1, match(\$2, /\.pkg\.tar.*/) - 1)\"\nXXX\"
        }
        /^checking .*\.\.\.$/ {
            progress = int((current + 0.4 * weight) * scale);
            print \"XXX\n\"progress\"\nC\"substr(\$0, 2, length(\$0) - 4)\"\nXXX\"
        }
        /^installing .*\.\.\.$/ {
            insindex++;
            progress = int((current + 0.4 * weight + 0.4 * weight * insindex / total) * scale);
            print \"XXX\n\"progress\"\nInstalling \"substr(\$2, 1, length(\$2) - 3)\"\nXXX\"
        }
        /^:: Running post-transaction hooks\.\.\.$/ {
            progress = int((current + 0.8 * weight) * scale);
            print \"XXX\n\"progress\"\nRunning post-transaction hooks\nXXX\"
        }
        /^\([ 0-9]+\/[0-9]+\)/ {
            percentage = (int(substr(\$0, 2, index(\$0, \"/\") - 2)) / int(substr(\$0, index(\$0, \"/\") + 1, index(\$0, \")\") - index(\$0, \"/\") - 1)));
            progress = int((current + 0.8 * weight + 0.2 * weight * percentage) * scale);
            message = substr(\$0, index(\$0, \")\") + 2);
            print \"XXX\n\"progress\"\n\"substr(message, 0, length(message) - 3)\"\nXXX\"
        }
        {
            fflush(stdout)
        }
    "
    
    
    # TODO: remove helper after installation

    [[ ${#aur_packages[@]} = 0 ]] && return
    
#     for package in ${aur_packages[@]}; do info "AUR package: $package"; done

    sed -i '/^root.*/a nobody ALL=(ALL) NOPASSWD: ALL' /mnt/etc/sudoers

    # TODO: progress feedback
    # TODO: replace yay
    local command="$(for i in $(seq 0 $(expr ${#aur_packages[@]} - 1)); do
        echo "echo -e 'XXX\n$(awk "BEGIN{print int(($current_progress + 0.6 * ${progress[install_packages]} + ($i / ${#aur_packages[@]}) * 0.4 * ${progress[install_packages]}) * 100 / $total_progress)}")\nInstalling ${aur_packages[$i]}\nXXX' &&"
        echo "sudo -u nobody bash -c 'HOME=/tmp; yay -S ${aur_packages[$i]} --noconfirm >/dev/null 2>&1' &&"
    done)"
    
    echo -e "XXX\n$(awk "BEGIN{print int(($current_progress + 0.6 * ${progress[install_packages]}) * 100 / $total_progress)}")\nInitializing AUR build system\nXXX"

    arch-chroot /mnt /bin/bash <<< "cd /tmp &&
        curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/yay-bin.tar.gz >/dev/null 2>&1 &&
        sudo -u nobody tar xfvz yay-bin.tar.gz > /dev/null 2>&1 &&
        cd yay-bin &&
        sudo -u nobody makepkg -risc --noconfirm > /dev/null 2>&1 &&
        cd /tmp &&
        rm yay-bin.tar.gz &&
        rm -rf yay-bin &&
        $command
        pacman -Rns --noconfirm yay-bin"

    sed -i '/^nobody.*/d' /mnt/etc/sudoers

    for package in ${aur_packages[@]}; do
        info "AUR package '$package': $(arch-chroot /mnt /bin/bash <<< "pacman -Qs ^$package$ >/dev/null && echo installed || echo not installed")"
    done
}

#TODO: other bootloader options
install_bootloader() {
    arch-chroot /mnt /bin/bash <<< "bootctl --path=/boot install > /dev/null 2>&1"
    echo 'default arch-*' > /mnt/boot/loader/loader.conf
    echo 'title  Arch Linux' > /mnt/boot/loader/entries/arch.conf
    echo 'linux  /vmlinuz-linux' >> /mnt/boot/loader/entries/arch.conf

    [[ $cpu_vendor = intel ]] && echo 'initrd /intel-ucode.img' >> /mnt/boot/loader/entries/arch.conf
    [[ $cpu_vendor = amd ]] && echo 'initrd /amd-ucode.img' >> /mnt/boot/loader/entries/arch.conf

    echo 'initrd /initramfs-linux.img' >> /mnt/boot/loader/entries/arch.conf

    local root_uuid=$(blkid | \
        grep ${selected_drive}2 | \
        awk '{print $2}' | \
        cut -d'"' -f 2)

    echo "options root=UUID=$root_uuid rw" >> /mnt/boot/loader/entries/arch.conf

    info "bootloader installed: $(grep -q UUID /mnt/boot/loader/entries/arch.conf 2>/dev/null && echo yes || echo no)"
}

generate_fstab() {
    genfstab -U /mnt >> /mnt/etc/fstab
    sed -i 's/relatime/noatime/g' /mnt/etc/fstab

    info "fstab generated: $(grep -q noatime /mnt/etc/fstab 2>/dev/null && echo yes || echo no)"
}

generate_locale() {
    arch-chroot /mnt /bin/bash <<< "sed -i '/^#$locale/s/^#//' /etc/locale.gen && \
        locale-gen > /dev/null 2>&1"
    echo "LANG=$locale" > /mnt/etc/locale.conf

    info "locale generated: $(grep -q $locale /mnt/etc/locale.conf 2>/dev/null && echo yes || echo no)"
}

set_timezone() {
    arch-chroot /mnt /bin/bash <<< "timedatectl set-ntp true && \
        ln -sf /usr/share/zoneinfo/$timezone /etc/localtime && \
        hwclock --systohc"

    info "timezone configured: $(ls -la /mnt/etc/localtime | grep -q $timezone && echo yes || echo no)"
}

configure_network() {
    echo $hostname > /mnt/etc/hostname
    echo "127.0.0.1  localhost" >> /mnt/etc/hosts
    echo "::1        localhost" >> /mnt/etc/hosts
    echo "127.0.1.1  $hostname.localdomain $hostname" >> /mnt/etc/hosts

    info "network configured: $(grep -q $hostname /mnt/etc/hosts 2>/dev/null && echo yes || echo no)"
}

set_root_password() {
    arch-chroot /mnt /bin/bash <<< "yes $password | passwd > /dev/null 2>&1"

    info "password set for root: $(grep root /mnt/etc/shadow 2>/dev/null | grep -q '\$6\$' && echo yes || echo no)"
}

configure_pacman() {
    sed -i '/Color/s/^#//g' /mnt/etc/pacman.conf
    sed -i '/CheckSpace/s/^#//g' /mnt/etc/pacman.conf
    sed -i '/VerbosePkgLists/s/^#//g' /mnt/etc/pacman.conf
    sed -i '/VerbosePkgLists/a ILoveCandy' /mnt/etc/pacman.conf

    info "pacman configured: $(grep -q ILoveCandy /mnt/etc/pacman.conf 2>/dev/null && echo yes || echo no)"
}

configure_tlp() {
    [[ $optimus_backend = bumblebee ]] && echo 'RUNTIME_PM_DRIVER_BLACKLIST="nouveau nvidia"' > /mnt/etc/tlp.d/10-driver-blacklist.conf

    info "tlp configured: $(grep -q nvidia /mnt/etc/tlp.d/10-driver-blacklist.conf 2>/dev/null && echo yes || echo no)"
}

configure_journald() {
    sed -i 's/#SystemMaxUse.*/SystemMaxUse=50M/g' /mnt/etc/systemd/journald.conf

    info "journald configured: $(grep -q ^SystemMaxUse /mnt/etc/systemd/journald.conf 2>/dev/null && echo yes || echo no)"
}

configure_coredump() {
    sed -i 's/#Storage.*/Storage=none/g' /mnt/etc/systemd/coredump.conf

    info "coredump configured: $(grep -q ^Storage /mnt/etc/systemd/coredump.conf 2>/dev/null && echo yes || echo no)"
}

# TODO: redirect errors
create_user() {
    arch-chroot /mnt /bin/bash <<< "groupadd $username && \
        useradd $username -m -g $username -G wheel && \
        yes $password | passwd $username > /dev/null 2>&1 && \
        chown -R $username:$username /home/$username && \
        usermod --shell /bin/$login_shell $username"

    [[ $optimus_backend = bumblebee ]] && arch-chroot /mnt /bin/bash <<< "gpasswd -a $username bumblebee >/dev/null"

    info "user created: $(grep $username /mnt/etc/shadow | grep -q '\$6\$' && echo yes || echo no)"
}

# TODO: redirect errors
enable_services() {
    arch-chroot /mnt /bin/bash <<< "systemctl enable NetworkManager.service >/dev/null 2>&1"
    
    [[ $feature_bluetooth_audio = yes ]] arch-chroot /mnt /bin/bash <<< "systemctl enable bluetooth.service >/dev/null 2>&1"

    [[ $has_battery = yes ]] && arch-chroot /mnt /bin/bash <<< "systemctl enable tlp.service >/dev/null 2>&1"

    [[ $has_battery = yes ]] && [[ $has_wireless = yes ]] && \
        arch-chroot /mnt /bin/bash <<< "systemctl enable NetworkManager-dispatcher.service >/dev/null 2>&1 && \
            systemctl mask systemd-rfkill.service >/dev/null 2>&1 && \
            systemctl mask systemd-rfkill.socket >/dev/null 2>&1"

    [[ $has_ssd = yes ]] && arch-chroot /mnt /bin/bash <<< "systemctl enable fstrim.timer >/dev/null 2>&1"
    [[ $optimus_backend = optimus ]] && arch-chroot /mnt /bin/bash <<< "systemctl enable bumblebeed.service >/dev/null 2>&1"
    [[ $optimus_backend = optimus-manager ]] && arch-chroot /mnt /bin/bash <<< "systemctl enable optimus-manager.service >/dev/null 2>&1"

    [[ $desktop_environment = dwm ]] && echo 'exec dwm' > "/mnt/home/$username/.xinitrc"
    [[ $desktop_environment = i3 ]] && echo 'exec i3' > "/mnt/home/$username/.xinitrc"
    [[ $desktop_environment = 'KDE Plasma' ]] && arch-chroot /mnt /bin/bash <<< "systemctl enable sddm.service >/dev/null 2>&1"
}

enable_archstrike_repository() {
    echo '' >> /mnt/etc/pacman.conf
    echo '[archstrike]' >> /mnt/etc/pacman.conf
    echo 'Server = https://mirror.archstrike.org/$arch/$repo' >> /mnt/etc/pacman.conf

    arch-chroot /mnt /bin/bash <<< "pacman -Syy && \
        pacman-key --init && \
        curl -sO https://archstrike.org/keyfile.asc && \
        pacman-key --add keyfile.asc > /dev/null 2>&1 && \
        rm keyfile.asc && \
        pacman-key --lsign-key 9D5F1C051D146843CDA4858BDE64825E7CBC0D51 > /dev/null 2>&1 && \
        pacman -Sy archstrike-keyring --noconfirm > /dev/null 2>&1 && \
        pacman -Sy archstrike-mirrorlist --noconfirm > /dev/null 2>&1 && \
        sed -i '/mirror\.archstrike\.org/c\Include = /etc/pacman.d/archstrike-mirrorlist' /etc/pacman.conf && \
        pacman -Syy > /dev/null 2>&1"

    info "archstrike repository enabled: $(grep -q archstrike-mirrorlist /mnt/etc/pacman.conf 2>/dev/null && echo yes || echo no)"
}

enable_passwordless_sudo() {
    sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^# //' /mnt/etc/sudoers

    info "passwordless sudo enabled: $(grep -q '^%wheel ALL=(ALL) NOPASSWD: ALL$' /mnt/etc/sudoers 2>/dev/null && echo yes || echo no)"
}

# TODO: handle different display managers
enable_autologin() {
    if [[ $desktop_environment = 'KDE Plasma' ]]; then
        echo -e "[Autologin]\nUser=$username\nSession=plasma.desktop" > /mnt/etc/sddm.conf.d/autologin.conf
        info "autologin enabled: $(grep -q $username /mnt/etc/sddm.conf.d/autologin.conf 2>/dev/null && echo yes || echo no)"
    fi

    # mkdir /mnt/etc/systemd/getty@tty1.service.d ?
    if [[ $desktop_environment = None ]]; then
        echo -e "[Service]\nExecStart=\nExecStart=-/usr/bin/agetty --autologin $username --noclear %I \$TERM" > /mnt/etc/system/systemd/getty@tty1.service.d/override.conf
        # TODO: debug check
    fi
}

# TODO: send shutdown signal to netcache
# TODO: improve aur debug log
# TODO: dual-boot support?
# TODO: script parameters

echo "[LOG]" > archer.log

boot_mode=$(detect_boot_mode)
info "boot mode: $boot_mode"

[[ $boot_mode != UEFI ]] && error "$boot_mode boot mode not supported"

set_terminal_colors
set_dialog_colors

systemctl stop reflector
timedatectl set-ntp true
sleep 5

cp /etc/pacman.conf /etc/pacman.conf.bak
cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak

cpu_vendor=$(detect_cpu_vendor)
info "cpu vendor: $cpu_vendor"
check_stderr && warn "could not detect CPU vendor"

gpu_configuration=$(detect_gpu_configuration)
info "gpu configuration: $gpu_configuration"

has_battery=$(detect_battery)
info "battery: $has_battery"
check_stderr && warn "error occured while checking for battery"

has_wireless=$(detect_wireless)
info "wireless: $has_wireless"

has_bluetooth=$(detect_bluetooth)
info "bluetooth: $has_bluetooth"

has_ssd=$(detect_ssd)
info "ssd: $has_ssd"
check_stderr && warn "could not query ssd information"

selected_drive=$(get_drive)
[[ -z $selected_drive ]] && error 'no drive selected'
info "selected drve: $selected_drive"

mirrorlist_country=$(get_mirrorlist_country)
[[ -z $mirrorlist_country ]] && error 'no mirrorlist country selected'
info "mirrorlist country: $mirrorlist_country"

locale=$(get_locale)
[[ -z $locale ]] && error 'no locale selected'
info "locale: $locale"

timezone=$(get_timezone)
[[ -z $timezone ]] && error 'no timezone selected'
info "timezone: $timezone"

hostname=$(get_hostname)
[[ -z $hostname ]] && error 'empty hostname'
info "hostname: $hostname"

username=$(get_username)
[[ -z $username ]] && error 'username hostname'
info "username: $username"

password=$(get_password)
[[ -z $password ]] && error 'empty password'
info "password: $password"

desktop_environment=$(get_desktop_environment)
[[ -z $desktop_environment ]] && error 'no DE/WM selected'
info "DE/WM: $desktop_environment"

login_shell=$(get_login_shell)
[[ -z $login_shell ]] && error 'no login shell selected'
info "login shell: $login_shell"

if [[ $gpu_configuration = optimus ]]; then
    optimus_backend=$(get_optimus_backend)
    [[ -z $optimus_backend ]] && error 'no optimus backend selected'
    info "optimus backend: $optimus_backend"
fi

optional_features=$(get_optional_features)

feature_netcache=$([[ $optional_features =~ 'netcache' ]] && echo yes || echo no)
info "enable netcache: $feature_netcache"
if [[ $feature_netcache = yes ]]; then
    netcache_ip=$(get_netcache_ip)
    [[ -z $netcache_ip ]] && error 'netcache ip empty'
    if ! ping -c1 $netcache_ip >/dev/null 2>archer.err; then
        check_stderr
        error "$netcache_ip unreachable"
    fi
    info "netcache ip: $netcache_ip"
fi


feature_autologin=$([[ $optional_features =~ 'autologin' ]] && echo yes || echo no)
info "enable autologin: $feature_autologin"

feature_rank_mirrors=$([[ $optional_features =~ 'rank mirrors' ]] && echo yes || echo no)
info "enable mirror ranking: $feature_rank_mirrors"

feature_archstrike_repository=$([[ $optional_features =~ 'archstrike repository' ]] && echo yes || echo no)
info "enable archstrike repository: $feature_archstrike_repository"

feature_extra_packages=$([[ $optional_features =~ 'add extra packages' ]] && echo yes || echo no)
info "extra packages: $feature_extra_packages"
if [[ $feature_extra_packages = yes ]]; then
    extra_packages=$(get_extra_packages)
    extra_packages_official=()
    extra_packages_aur=()

    pacman -Sy >/dev/null 2>archer.err
    check_stderr && error 'could not fetch pacman database'

    for package in $extra_packages; do
        if pacman -Ss ^$package$ >/dev/null; then
            extra_packages_official+=($package)
            info "extra official package: $package"
        elif curl -sI https://aur.archlinux.org/packages/$package/ | head -n1 | grep -q 200; then
            extra_packages_aur+=($package)
            info "extra aur package: $package"
        else
            warn "unknown extra package: $package"
        fi
    done
fi

feature_passwordless_sudo=$([[ $optional_features =~ 'passwordless sudo' ]] && echo yes || echo no)
info "enable passwordless sudo: $feature_passwordless_sudo"

feature_bluetooth_audio=$([[ $optional_features =~ 'bluetooth audio support' ]] && echo yes || echo no)
info "enable bluetooth audio support: $feature_bluetooth_audio"


declare -A description
description[create_partitions]="Creating partitions on $selected_drive"
description[download_mirrorlist]='Downloading mirrorlist'
description[rank_mirrors]='Ranking mirrors'
description[enable_netcache]='Enabling netcache'
description[install_packages]='Installing packages'
# description[install_aur_packages]='Installing AUR packages'
description[install_bootloader]='Installing bootloader'
description[generate_fstab]='Generating fstab'
description[generate_locale]='Generating locale'
description[set_timezone]='Setting timezone'
description[configure_network]='Configuring network'
description[set_root_password]='Setting root password'
description[configure_pacman]='Configuring pacman'
description[configure_tlp]='Configuring TLP'
description[configure_journald]='Configuring journald'
description[configure_coredump]='Configuring coredump'
description[create_user]="Creating user $username"
description[enable_services]='Enabling systemd services'
description[enable_archstrike_repository]='Enabling archstrike repository'
description[enable_passwordless_sudo]="Enable passwordless sudo for wheel group"
description[enable_autologin]="Enabling autologin for $username"

declare -A progress
progress[create_partitions]=100
progress[download_mirrorlist]=100
[[ $feature_rank_mirrors = yes ]] && progress[rank_mirrors]=10000
[[ $feature_netcache = yes ]] && progress[enable_netcache]=100
progress[install_packages]=20000
# condition for this
# progress[install_aur_packages]=100
progress[install_bootloader]=200
progress[generate_fstab]=100
progress[generate_locale]=500
progress[set_timezone]=100
progress[configure_network]=100
progress[set_root_password]=100
progress[configure_pacman]=100
[[ $has_battery = yes ]] && progress[configure_tlp]=100
progress[configure_journald]=100
progress[configure_coredump]=100
progress[create_user]=100
progress[enable_services]=200
[[ $feature_archstrike_repository = yes ]] && progress[enable_archstrike_repository]=1000
[[ $feature_passwordless_sudo = yes ]] && progress[enable_passwordless_sudo]=100
[[ $feature_autologin = yes ]] && progress[enable_autologin]=100

total_progress=0
for item in ${progress[@]}; do
    let total_progress+=$item
done

execution_order=(
    create_partitions
    download_mirrorlist
    $([[ $feature_rank_mirrors = yes ]] && echo rank_mirrors)
    $([[ $feature_netcache = yes ]] && echo enable_netcache)
    install_packages
#     install_aur_packages
    install_bootloader
    generate_fstab
    generate_locale
    set_timezone
    configure_network
    set_root_password
    configure_pacman
    $([[ $has_battery = yes ]] && echo configure_tlp)
    configure_journald
    configure_coredump
    create_user
    enable_services
    $([[ $feature_archstrike_repository = yes ]] && echo enable_archstrike_repository)
    $([[ $feature_passwordless_sudo = yes ]] && echo enable_passwordless_sudo)
    $([[ $feature_autologin = yes ]] && echo enable_autologin)
)

current_progress=0
for step in ${execution_order[@]}; do
    echo -e "XXX"
    echo -e "$(($current_progress * 100 / $total_progress))"
    echo -e "${description[$step]}"
    echo -e "XXX"
    $step
    let current_progress+=${progress[$step]}
done | whiptail --title "Progress" --gauge "Initializing" 0 $((`tput cols` * 3 / 4)) 0

mv /etc/pacman.conf.bak /etc/pacman.conf
mv /etc/pacman.d/mirrorlist.bak /etc/pacman.d/mirrorlist

whiptail --title 'Show log' --yesno "Show installation log?" 0 0 3>&1 1>&2 2>&3

[[ $? = 0 ]] && whiptail --title 'archer.log' --textbox archer.log 0 0 3>&1 1>&2 2>&3
